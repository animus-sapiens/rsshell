buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath('io.spring.gradle:dependency-management-plugin:1.1.2')
        classpath('gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.9')
    }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'maven-publish'

def springVersion = '3.1.2'
def lombokVersion = "1.18.30"
def junitVersion = '5.10.2'
def mockitoVersion = '5.11.0'
def versionProp = new Properties()
versionProp.setProperty("version", project.version.toString())
versionProp.setProperty("jarBaseName", project.baseName.toString())

repositories {
    repositories {
        mavenCentral()
    }
}

dependencies {
    compileOnly ("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor ("org.projectlombok:lombok:$lombokVersion")

    implementation ("org.springframework.boot:spring-boot-starter-rsocket:$springVersion")
    implementation ("org.springframework.boot:spring-boot-starter-web:$springVersion")
    implementation ("org.springframework:spring-beans:5.3.27")
    implementation ("org.springframework:spring-context:5.3.27")
    implementation ("org.owasp.esapi:esapi:2.5.1.0")
    implementation ("org.apache.commons:commons-lang3:3.12.0")
    implementation ("org.slf4j:slf4j-api:2.0.7")
    implementation ("jakarta.annotation:jakarta.annotation-api:3.0.0")
    implementation ("ch.qos.logback:logback-classic:1.4.11")
    implementation ("ch.qos.logback:logback-core:1.4.11")
    implementation ("javax.servlet:servlet-api:2.5")

    runtimeOnly ("org.apache.tomcat.embed:tomcat-embed-core:9.0.37")
    runtimeOnly ('commons-fileupload:commons-fileupload:1.5')
    runtimeOnly ("org.springframework:spring-jcl:5.3.27")
    runtimeOnly ("org.springframework:spring-aop:5.3.27")
    runtimeOnly ("org.springframework:spring-expression:5.3.27")
    runtimeOnly ("io.netty:netty-common:4.1.92.Final")
    runtimeOnly ("io.netty:netty-codec-http:4.1.92.Final")
    runtimeOnly ("io.netty:netty-codec-http2:4.1.92.Final")
    runtimeOnly ("io.netty:netty-resolver:4.1.55.Final")
    runtimeOnly ("io.netty:netty-transport:4.1.55.Final")
    runtimeOnly ("io.netty:netty-handler:4.1.92.Final")
    runtimeOnly ("io.netty:netty-buffer:4.1.55.Final")
    runtimeOnly ("io.netty:netty-codec:4.1.55.Final")
    runtimeOnly ("io.netty:netty-codec-dns:4.1.55.Final")
    runtimeOnly ("io.netty:netty-transport-native-unix-common:4.1.55.Final")
    runtimeOnly ("io.netty:netty-resolver-dns-native-macos:4.1.92.Final")
    runtimeOnly ("io.netty:netty-resolver-dns-native-macos:4.1.92.Final:osx-x86_64")
    runtimeOnly ("io.projectreactor.netty:reactor-netty-core:1.0.2")
    runtimeOnly ("io.projectreactor.netty:reactor-netty-http:1.0.2")
    runtimeOnly ("io.rsocket:rsocket-transport-netty:1.1.4")

    testImplementation ("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testImplementation ("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    testImplementation ("org.mockito:mockito-core:$mockitoVersion")
    testImplementation ("org.mockito:mockito-junit-jupiter:$mockitoVersion")
    testImplementation ("org.springframework:spring-test:6.1.6")
    testImplementation ("org.powermock:powermock-api-mockito2:2.0.9")
    testImplementation ("uk.org.lidalia:slf4j-test:1.2.0")

    testRuntimeOnly ("org.junit.platform:junit-platform-launcher:1.10.0")
    testRuntimeOnly ("javax.servlet:servlet-api:2.5")
}

task wrapper(type: Wrapper) {
    gradleVersion = '8.4'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

//Using google-java-format jar for two tasks, as the plugin fails in a multi-module gradle-project with JDK 17.
task doGJF(type: Exec) {
    workingDir "$projectDir/../gjf"
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', 'google-java-format.bat', 'format'
    }
    else {
        commandLine './google-java-format.sh', 'format'
    }
}

task doGJFV(type: Exec) {
    workingDir "$projectDir/../gjf"
    def output = new ByteArrayOutputStream()
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        it.setStandardOutput(output);
        commandLine 'cmd', '/c', 'google-java-format.bat', 'verify'
    }
    else {
        commandLine './google-java-format.sh', 'verify'
    }

    doLast {
        String printed = it.getStandardOutput().toString()
        if(printed.contains("not compliant") ) {
            throw new GradleException(printed + 'Pls run doGJF task.')
        } else {
            println printed
        }
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from "$projectDir/dependencies"
    manifest {
        attributes (
                'Name': "${versionProp.jarBaseName.toString()}",
                'Implementation-Version': "${versionProp.version.toString()}",
                'Main-Class': 'com.github.rsshell.client.Application'

        )
    }

    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it.getName() :  zipTree(it) }
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-Xlint:deprecation', '-Xlint:unchecked'])
    doFirst {
        doGJF
    }
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-Xlint:deprecation', '-Xlint:unchecked'])
}

test {
    useJUnitPlatform()
    testLogging {
        // For log level LIFECYCLE
        events "standardOut", "started", "passed", "skipped", "failed"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true

        // For log level DEBUG and INFO
        debug {
            events "standardOut", "started", "passed", "skipped", "failed"
            exceptionFormat "full"
            showExceptions true
            showCauses true
            showStackTraces true
        }

        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}